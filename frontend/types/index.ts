/**
 * Core type definitions for the Verina search application
 *
 * These types match backend data models exactly:
 * - backend/src/engines_v1/models/search_models.py
 * - backend/src/chat/model/models.py
 */

// ============================================================================
// Search Models
// ============================================================================

/**
 * Individual search result candidate
 * Source: backend/src/engines_v1/models/search_models.py:9-23
 */
export interface SearchCandidate {
  /** Citation index for [n] references (1-based) */
  idx: number;
  /** Page title */
  title: string;
  /** Page URL */
  url: string;
  /** Short description (300-1000 chars) */
  snippet: string;
  /** Content age from provider (e.g., '2 months ago', '2024-01-15', or null) */
  age?: string | null;
}

/**
 * Search request model
 * Source: backend/src/api/v1/search.py:21-25
 */
export interface SearchRequest {
  /** Search query */
  query: string;
  /** Enable deep thinking mode for complex queries */
  deep_thinking?: boolean;
}

/**
 * Complete search response from backend API
 * Source: backend/src/engines_v1/models/search_models.py:41-96
 */
export interface SearchAPIResponse {
  // Core identifiers
  search_id: string;
  user_id: string;
  original_query: string;
  display_name?: string | null;
  timestamp: string; // ISO datetime string

  // Search configuration
  mode: "standard" | "deep_thinking";
  provider: "exa-fast" | "exa" | "serper";
  tool_used?: string | null; // 'fast_search' or 'deep_search'

  // Search results
  candidates: SearchCandidate[];

  // AI answer
  answer: string;

  // Legacy compatibility (for old database records, empty in V1)
  queries: string[];
  search_session: string;
}

// ============================================================================
// Chat Models
// ============================================================================

/**
 * Single step in the thinking chain
 * Source: backend/src/chat/model/models.py:40-58
 */
export interface ThinkingStep {
  /** Step number (1-based) */
  step: number;
  /** Tool name: web_search | execute_python | file_read | file_write | etc. */
  tool: string;
  /** Tool input parameters */
  input: Record<string, any>;
  /** Tool execution result */
  output: string;
  /** Whether execution succeeded */
  success: boolean;
  /** ISO timestamp */
  timestamp: string;

  // Optional fields
  /** LLM's internal reasoning (from GPT-5 reasoning field) */
  thinking?: string | null;
  /** URLs accessed (for web tools) */
  urls?: string[] | null;
  /** Whether output contains code */
  has_code?: boolean;
  /** Whether output contains image */
  has_image?: boolean;
}

/**
 * Chat request from frontend
 * Source: backend/src/chat/model/models.py:95-106
 */
export interface ChatRequest {
  /** User's message (1-2000 chars) */
  message: string;
  /** Session ID for conversation continuity */
  session_id?: string | null;
  /** Operation mode: 'chat' (default) or 'agent' */
  mode?: "chat" | "agent";

  // Optional parameters
  /** Override default temperature (0.0-2.0) */
  temperature?: number | null;
  /** Override max ReAct iterations (1-10) */
  max_iterations?: number | null;
}

/**
 * Artifact generated by AI (HTML blog, visualization, etc.)
 * Source: backend/src/chat/agent/chat_agent.py:928-934
 */
export interface Artifact {
  /** Artifact type: 'html_blog' | 'visualization' | 'chart' | etc. */
  type: string;
  /** Artifact title */
  title: string;
  /** HTML content to render */
  html_content?: string;
  /** File path where artifact is saved (relative to workspace) */
  file_path?: string;
  /** Artifact file size in KB */
  file_size_kb?: number;
  /** Additional metadata */
  metadata?: Record<string, any>;
}

/**
 * Citation source from web_search results
 */
export interface CitationSource {
  /** Citation index for [n] references (1-based) */
  idx: number;
  /** Page title */
  title: string;
  /** Page URL */
  url: string;
  /** Short description */
  snippet: string;
  /** Content age from provider (e.g., '2 months ago', '2024-01-15', or null) */
  age?: string | null;
  /** Cache file path (relative to workspace) */
  cache_path?: string | null;
}

/**
 * Chat response from backend
 * Source: backend/src/chat/model/models.py:108-151
 */
export interface ChatResponse {
  // Response identifier
  /** Unique identifier for this response */
  response_id: string;

  // Session info
  /** Session ID for this conversation */
  session_id: string;
  /** User identifier */
  user_id: string;

  // Message content
  /** Original user message */
  user_message: string;
  /** Assistant's final response */
  assistant_message: string;

  // Mode
  /** Operation mode: 'chat' or 'agent' */
  mode: string;

  // Thinking process
  /** Thinking steps if tools were used */
  thinking_steps?: ThinkingStep[] | null;

  // Summary metadata
  /** Whether any tools were used */
  used_tools: boolean;
  /** Whether response contains code execution */
  has_code: boolean;
  /** Whether response contains web search results */
  has_web_results: boolean;

  // Performance metrics
  /** Total processing time in milliseconds */
  total_time_ms: number;
  /** LLM model used */
  model_used: string;
  /** Temperature parameter */
  temperature: number;
  /** ISO timestamp */
  timestamp: string;

  // Context size tracking
  /** Total prompt tokens (context size) */
  prompt_tokens?: number | null;

  // Sources for citation (from web_search results)
  /** Citation sources for [1][2] references */
  sources?: CitationSource[] | null;

  // Artifact (for HTML blog, charts, etc.)
  /** Generated artifact */
  artifact?: Artifact | null;
}

/**
 * Message for chat UI display (frontend-specific)
 */
export interface ChatMessageUI {
  /** Unique message ID */
  id: string;
  /** Message role */
  type: "user" | "assistant";
  /** Message content */
  content: string;
  /** Message timestamp */
  timestamp: Date;

  // Optional fields for assistant messages
  /** Thinking steps if assistant used tools */
  thinking_steps?: ThinkingStep[];
  /** Citation sources for [1][2] references */
  sources?: CitationSource[];
  /** Whether tools were used */
  used_tools?: boolean;
  /** Whether response contains code */
  has_code?: boolean;
  /** Whether response contains web search results */
  has_web_results?: boolean;
  /** Generated artifact */
  artifact?: Artifact;

  // UI-specific fields
  /** Whether message is animating (for slide-in effect) */
  isAnimating?: boolean;
}

// ============================================================================
// History Models
// ============================================================================

/**
 * History item for sidebar display
 */
export interface HistoryItem {
  /** Unique identifier (search_id or session_id) */
  id: string;
  /** Display text (query or first message) */
  query: string;
  /** Display name (optional, LLM-generated title) */
  display_name?: string | null;
  /** Formatted timestamp (e.g., "2 hours ago") */
  timestamp: string;
}

/**
 * Session summary for chat history sidebar
 * Source: backend/src/chat/model/models.py:165-174
 */
export interface SessionSummary {
  /** Session identifier */
  session_id: string;
  /** First message preview */
  preview: string;
  /** Number of messages */
  message_count: number;
  /** Last activity timestamp (ISO string) */
  last_updated: string;
}

/**
 * Full conversation history for a session
 * Source: backend/src/chat/model/models.py:153-163
 */
export interface ConversationHistory {
  /** Session identifier */
  session_id: string;
  /** All chat responses in conversation */
  responses: ChatResponse[];
  /** Total number of exchanges */
  total_messages: number;
  /** When conversation started (ISO string) */
  created_at: string;
  /** Last message timestamp (ISO string) */
  updated_at: string;
}

// ============================================================================
// UI Component Props
// ============================================================================

/**
 * Props for sidebar component (frontend-specific)
 */
export interface SidebarProps {
  /** Whether sidebar is open */
  isOpen: boolean;
  /** Close handler */
  onClose: () => void;
  /** Search history items */
  searchHistory: HistoryItem[];
  /** Chat history items */
  chatHistory: HistoryItem[];
  /** Optional CSS class */
  className?: string;
}

// ============================================================================
// Legacy Types (for backward compatibility)
// ============================================================================

// All legacy types have been removed - use current types instead
